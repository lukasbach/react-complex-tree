"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6589],{9957:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=n(7896),i=(n(2784),n(876));const a={sidebar_position:4},o="Managing a tree's view state",s={unversionedId:"guides/viewstate",id:"guides/viewstate",title:"Managing a tree's view state",description:"Both the controlled and uncontrolled environment define a viewState prop which specifies the visual",source:"@site/docs/guides/viewstate.mdx",sourceDirName:"guides",slug:"/guides/viewstate",permalink:"/docs/guides/viewstate",draft:!1,editUrl:"https://github.com/lukasbach/react-complex-tree/edit/main/packages/docs/docs/guides/viewstate.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Custom Render Hooks",permalink:"/docs/guides/rendering"},next:{title:"Drag and Drop Customizability",permalink:"/docs/guides/drag-and-drop"}},l={},d=[{value:"Providing a static state for controlled environments",id:"providing-a-static-state-for-controlled-environments",level:2},{value:"Updating the state for controlled environments",id:"updating-the-state-for-controlled-environments",level:2},{value:"Providing an initial view state for uncontrolled environments",id:"providing-an-initial-view-state-for-uncontrolled-environments",level:2},{value:"Maintaining the state of multiple trees",id:"maintaining-the-state-of-multiple-trees",level:2},{value:"Providing custom view state",id:"providing-custom-view-state",level:2}],m={toc:d};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"managing-a-trees-view-state"},"Managing a tree's view state"),(0,i.kt)("p",null,"Both the controlled and uncontrolled environment define a ",(0,i.kt)("inlineCode",{parentName:"p"},"viewState")," prop which specifies the visual\nstate of each tree, i.e. which items are focused, selected and expanded. For the controlled environment,\nthis always reflects the current visual state, and needs to be manually updated if the user interacts\nwith the tree. For the uncontrolled environment, the value supplied is used as initial state."),(0,i.kt)("h2",{id:"providing-a-static-state-for-controlled-environments"},"Providing a static state for controlled environments"),(0,i.kt)("p",null,"When providing a view state for a controlled environment, that state remains static independent of user\nactions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function App() {\n  return (\n    <ControlledTreeEnvironment\n      items={longTree.items}\n      getItemTitle={item => item.data}\n      viewState={{\n        ['tree-1']: {\n          focusedItem: 'America',\n          selectedItems: ['America', 'Europe', 'Asia'],\n          expandedItems: ['Meals', 'Drinks'],\n        },\n      }}\n    >\n      <Tree treeId=\"tree-1\" rootItem=\"root\" treeLabel=\"Tree Example\" />\n    </ControlledTreeEnvironment>\n  );\n}\n")),(0,i.kt)("h2",{id:"updating-the-state-for-controlled-environments"},"Updating the state for controlled environments"),(0,i.kt)("p",null,"You can implement change hooks to the environment to update the view state dependent\non user actions."),(0,i.kt)("p",null,"Read ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/controlled-environment#managing-the-view-state-of-the-tree"},"the Documentation on controlled environments"),"\nfor more details."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function App() {\n  const [focusedItem, setFocusedItem] = useState();\n  const [expandedItems, setExpandedItems] = useState([]);\n  const [selectedItems, setSelectedItems] = useState([]);\n  return (\n    <ControlledTreeEnvironment\n      items={longTree.items}\n      getItemTitle={item => item.data}\n      viewState={{\n        [\'tree-2\']: {\n          focusedItem,\n          expandedItems,\n          selectedItems,\n        },\n      }}\n      onFocusItem={item => setFocusedItem(item.index)}\n      onExpandItem={item => setExpandedItems([...expandedItems, item.index])}\n      onCollapseItem={item =>\n        setExpandedItems(expandedItems.filter(expandedItemIndex => expandedItemIndex !== item.index))\n      }\n      onSelectItems={items => setSelectedItems(items)}\n    >\n      <Tree treeId="tree-2" rootItem="root" treeLabel="Tree Example" />\n    </ControlledTreeEnvironment>\n  );\n}\n')),(0,i.kt)("h2",{id:"providing-an-initial-view-state-for-uncontrolled-environments"},"Providing an initial view state for uncontrolled environments"),(0,i.kt)("p",null,"For uncontrolled environments, the viewState prop defines the initial visual state of the tree, but\nuser interactions will change the state. You can still implement update hooks to get notified\nabout changes to the state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function App() {\n  return (\n    <UncontrolledTreeEnvironment\n      dataProvider={new StaticTreeDataProvider(longTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      viewState={{\n        ['tree-3']: {\n          focusedItem: 'America',\n          selectedItems: ['America', 'Europe', 'Asia'],\n          expandedItems: ['Meals', 'Drinks'],\n        },\n      }}\n    >\n      <Tree treeId=\"tree-3\" rootItem=\"root\" treeLabel=\"Tree Example\" />\n    </UncontrolledTreeEnvironment>\n  );\n}\n")),(0,i.kt)("h2",{id:"maintaining-the-state-of-multiple-trees"},"Maintaining the state of multiple trees"),(0,i.kt)("p",null,"When you have several trees in your environment, you need to maintain\ntheir states as respective objects within the environment viewState."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function App() {\n  return (\n    <UncontrolledTreeEnvironment\n      dataProvider={new StaticTreeDataProvider(longTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      viewState={{\n        ['multi-tree-1']: {\n          focusedItem: 'America',\n          selectedItems: ['America', 'Europe', 'Asia'],\n          expandedItems: ['Meals', 'Drinks'],\n        },\n        ['multi-tree-2']: {\n          focusedItem: 'Drinks',\n          expandedItems: ['Drinks'],\n        },\n        // No initial state for multi-tree-3\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-evenly',\n          alignItems: 'baseline',\n        }}\n      >\n        <Tree treeId=\"multi-tree-1\" rootItem=\"root\" treeLabel=\"Tree Example\" />\n        <Tree treeId=\"multi-tree-2\" rootItem=\"root\" treeLabel=\"Tree Example\" />\n        <Tree treeId=\"multi-tree-3\" rootItem=\"root\" treeLabel=\"Tree Example\" />\n      </div>\n    </UncontrolledTreeEnvironment>\n  );\n}\n")),(0,i.kt)("h2",{id:"providing-custom-view-state"},"Providing custom view state"),(0,i.kt)("p",null,"You can also provide custom view state properties for your tree data. Provide the keys\nof your custom properties as the second type argument to your environment, then\ndeclare them as additional properties on the viewState object."),(0,i.kt)("p",null,"You can then use the ",(0,i.kt)("inlineCode",{parentName:"p"},"context.viewStateFlags")," property on you item render logic\nto check whether the item has the respective flag or not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  return (\n    <UncontrolledTreeEnvironment<ItemData, \"activeItems\" | \"disabledItems\">\n      dataProvider={new StaticTreeDataProvider(longTree.items, (item, data) => ({ ...item, data }))}\n      getItemTitle={item => item.data}\n      viewState={{\n        ['tree-1']: {\n          activeItems: ['America', 'Europe', 'Asia'],\n          disabledItems: ['Meals', 'Drinks'],\n        },\n      }}\n      renderItem={({ item, depth, children, title, context, arrow }) => {\n        // Use boolean flags ``context.viewStateFlags.activeItems`` and ``context.viewStateFlags.disabledItems``\n        // to check if the item has the respective flags.\n      }}\n    >\n      {/* ... */}\n    </UncontrolledTreeEnvironment>\n  );\n}\n")))}c.isMDXComponent=!0},876:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=i,v=p["".concat(l,".").concat(u)]||p[u]||c[u]||a;return n?r.createElement(v,o(o({ref:t},m),{},{components:n})):r.createElement(v,o({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);